package gui.Naduni;

import Controller.Ruchi.BloodPacketController;
import controller.IssueController;
import controller.SampleDetailsController;
import controller.IDGenerator;
import java.awt.Component;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Nands
 */
public class IssueOfBlood extends javax.swing.JInternalFrame {

    private String[] title = {"Packet ID", "NIC of Donor", "Recieved ID", "Blood Group", "Blood Type", "Date of Donation", "Collected Camp ID", "Date of Expiry", "Priority"};
    private DefaultTableModel dtm1;
    private DefaultTableModel dtm2;
    BloodPacketController bPController;

    /**
     * Creates new form IssueOfBlood
     */
    public IssueOfBlood(Dimension d) {
        dtm1 = new DefaultTableModel(title, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        dtm2 = new DefaultTableModel(title, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        initComponents();
        bPController = new BloodPacketController();

        setSize(d);
        setRequestCombo(requestCombo);
        setIssuerCombo(issueCombo);
        crossMatchTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        selectedTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

    }

    public void setRequestCombo(JComboBox combo) {
        try {
            combo.removeAllItems();
            ResultSet rst = null;
            rst = SampleDetailsController.getAllFilteredRequestNos();
            while (rst.next()) {
                String number = rst.getString("RequestNo");
                combo.addItem(number);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Data Error!", "Warning!", JOptionPane.OK_OPTION);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(IssueOfBlood.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setIssuerCombo(JComboBox combo) {
        try {
            combo.removeAllItems();
            ResultSet rst = null;
            rst = IssueController.getAllEmployers();

            while (rst.next()) {
                combo.addItem(rst.getString("Name"));
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Data Error!", "Warning!", JOptionPane.OK_OPTION);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(IssueOfBlood.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        requestCombo = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        crossMatchTable = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        completeBtn = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        issueCombo = new javax.swing.JComboBox();

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/issueofblood.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 102), 2));

        jLabel12.setFont(new java.awt.Font("Stencil Std", 3, 18)); // NOI18N
        jLabel12.setText("REQUEST ID");

        requestCombo.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        requestCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(requestCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(requestCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "Croos Matched Blood Packets", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14)), new javax.swing.border.LineBorder(new java.awt.Color(255, 204, 204), 2, true))); // NOI18N

        crossMatchTable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        crossMatchTable.setModel(dtm1);
        jScrollPane1.setViewportView(crossMatchTable);

        addBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(addBtn)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selected Blood Packets", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14)), new javax.swing.border.LineBorder(new java.awt.Color(255, 204, 204), 2, true))); // NOI18N

        selectedTable.setModel(dtm2);
        jScrollPane2.setViewportView(selectedTable);

        jButton2.setText("Add");

        deleteBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(545, 545, 545)
                    .addComponent(jButton2)
                    .addContainerGap(546, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(55, 55, 55)
                    .addComponent(jButton2)
                    .addContainerGap(61, Short.MAX_VALUE)))
        );

        completeBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        completeBtn.setText("Complete Issue");
        completeBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 102)));
        completeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeBtnActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 204, 204));
        jLabel13.setText("Issued By:");

        issueCombo.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 4, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(issueCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(completeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(issueCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(completeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed

        try {
            int row = selectedTable.getSelectedRow();
            String Table_click = (selectedTable.getModel().getValueAt(row, 0).toString());
            String request = "" + requestCombo.getSelectedItem();
            ResultSet rst = null;
            rst = IssueController.getPreviousInfo(request, Table_click);

            while (rst.next()) {

                String packetid = rst.getString("PacketID");
                String nic = rst.getString("Nic");
                String recievedid = rst.getString("RecievedID");
                String group = rst.getString("BloodGroup");
                String type = rst.getString("BloodType");
                String dateOfDonation = rst.getString("DateOfDonation");
                String campid = rst.getString("CampID");
                String dateOfExpiry = rst.getString("DateOfExpiry");
                String priority = rst.getString("Priority");
                String[] selectedRow = {packetid, nic, recievedid, group, type, dateOfDonation, campid, dateOfExpiry, priority};

                dtm1.addRow(selectedRow);

                dtm2.removeRow(row);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Data Error!", "Warning!", JOptionPane.OK_OPTION);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(IssueOfBlood.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(null, "Please select and delete the packets from the list", "Warning!", JOptionPane.OK_OPTION);
        }

    }//GEN-LAST:event_deleteBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed

        try {
            int row = crossMatchTable.getSelectedRow();
            String Table_click = (crossMatchTable.getModel().getValueAt(row, 0)).toString();

            ResultSet rst = null;
            rst = IssueController.getSelectedInfo(Table_click);
            while (rst.next()) {
                String packetid = rst.getString("PacketID");
                String nic = rst.getString("Nic");
                String recievedid = rst.getString("RecievedID");
                String group = rst.getString("BloodGroup");
                String type = rst.getString("BloodType");
                String dateOfDonation = rst.getString("DateOfDonation");
                String campid = rst.getString("CampID");
                String dateOfExpiry = rst.getString("DateOfExpiry");
                String priority = rst.getString("Priority");

                String[] selectedRow = {packetid, nic, recievedid, group, type, dateOfDonation, campid, dateOfExpiry, priority};
                dtm2 = new DefaultTableModel(title, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                selectedTable.setModel(dtm2);
                dtm2.addRow(selectedRow);
                resizeColumnWidth(selectedTable);

                dtm1.removeRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Data Error!", "Warning!", JOptionPane.OK_OPTION);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(IssueOfBlood.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(null, "Please select and add the samples to the list", "Warning!", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_addBtnActionPerformed
    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 50;
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width, width);
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    private void completeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeBtnActionPerformed
        if (selectedTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Please choose the packets packet(s) for issue", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to commit the issue ?", "Issue", JOptionPane.YES_NO_OPTION);
            if (confirm == 0) {
                String issueID = "";
                ResultSet rst = null;
                try {
                    rst = IssueController.getResultIDs();
                    rst.last();
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(IssueOfBlood.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Data Error!", "Warning!", JOptionPane.ERROR_MESSAGE);
                }

                String curID = null;
                try {
                    curID = rst.getString("issueID");
                    try {
                        issueID = IDGenerator.generateNextID(curID);
                    } catch (Exception ex) {
                        Logger.getLogger(IssueOfBlood.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (SQLException e) {
                    issueID = "IS00000001";
                }
                String employer = "" + issueCombo.getSelectedItem();
                String employeeid = null;
                try {
                    rst = IssueController.getEmployeeId(employer);
                    while (rst.next()) {
                        employeeid = rst.getString("EmpID");
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Data Error!", "Warning!", JOptionPane.ERROR_MESSAGE);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(IssueOfBlood.class.getName()).log(Level.SEVERE, null, ex);
                }

                for (int i = 0; i < selectedTable.getRowCount(); i++) {
                    String requestNo = "" + requestCombo.getSelectedItem();
                    String packetID = selectedTable.getValueAt(i, 0).toString();
                    try {
                        Calendar cal = new GregorianCalendar();
                        int month = cal.get(Calendar.MONTH);
                        int year = cal.get(Calendar.YEAR);
                        int day = cal.get(Calendar.DAY_OF_MONTH);
                        String date = Integer.toString(year) + "-" + Integer.toString(month) + "-" + Integer.toString(day);

                        int second = cal.get(Calendar.SECOND);
                        int minute = cal.get(Calendar.MINUTE);
                        int hour = cal.get(Calendar.HOUR);
                        String time = Integer.toString(hour) + ":" + Integer.toString(minute) + ":" + Integer.toString(second);

                        IssueController.updateIssue(requestNo, packetID, issueID, employeeid, date, time);

                        JOptionPane.showMessageDialog(null, "Issued Succesfully !", "Issue", JOptionPane.INFORMATION_MESSAGE);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(IssueOfBlood.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Data Error!", "Warning!", JOptionPane.ERROR_MESSAGE);
                    }
                }
                for (int i = 0; i < crossMatchTable.getRowCount(); i++) {
                    String packetID = (String) crossMatchTable.getValueAt(i, 0);
                    try {
                        bPController.markUnCrossMatched(packetID);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(IssueOfBlood.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(IssueOfBlood.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }


    }//GEN-LAST:event_completeBtnActionPerformed

    private void requestComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestComboActionPerformed
        try {
            String requestNo = "" + requestCombo.getSelectedItem();
            ResultSet rst = null;
            rst = IssueController.getCrossMatchedInfo(requestNo);
            boolean noChoices = true;
            dtm1 = new DefaultTableModel(title, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            crossMatchTable.setModel(dtm1);
            while (rst.next()) {
                String packetid = rst.getString("PacketID");
                String nic = rst.getString("Nic");
                String recievedid = rst.getString("RecievedID");
                String group = rst.getString("BloodGroup");
                String type = rst.getString("BloodType");
                String dateOfDonation = rst.getString("DateOfDonation");
                String campid = rst.getString("CampID");
                String dateOfExpiry = rst.getString("DateOfExpiry");
                String priority = rst.getString("Priority");
                String[] row = {packetid, nic, recievedid, group, type, dateOfDonation, campid, dateOfExpiry, priority};
                dtm1.addRow(row);
                resizeColumnWidth(crossMatchTable);
                noChoices = false;
            }
            if (noChoices == true) {
                JOptionPane.showMessageDialog(null, "Something is wrong", "Warning!", JOptionPane.OK_OPTION);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Data Error!", "Warning!", JOptionPane.OK_OPTION);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(IssueOfBlood.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(null, "Please select and add the packets to the list", "Warning!", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_requestComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton completeBtn;
    private javax.swing.JTable crossMatchTable;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JComboBox issueCombo;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox requestCombo;
    private javax.swing.JTable selectedTable;
    // End of variables declaration//GEN-END:variables

}
