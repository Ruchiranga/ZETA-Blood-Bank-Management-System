/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.Ruchi;

import Controller.Predictions;
import Controller.Ruchi.SampleDetailController;
import java.awt.Color;
import java.awt.GridLayout;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author ruchiranga
 */
public class PredictRequests extends javax.swing.JInternalFrame {

    SampleDetailController sdcontroller;

    /**
     * Creates new form PredictRequests
     */
    public PredictRequests() {
        initComponents();
        sdcontroller = new SampleDetailController();
        Calendar calendar = Calendar.getInstance();
        yearChooser.setStartYear(calendar.get(Calendar.YEAR));
        monthChooser.setMonth(calendar.get(calendar.MONTH) + 1);

        int year = yearChooser.getYear();
        int month = monthChooser.getMonth() + 1;

        int data[][] = null;

        try {
            data = sdcontroller.getYearlyRequestCountsOf(month);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PredictRequests.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PredictRequests.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (data != null) {
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for (int i = 0; i < data[0].length; i++) {
                dataset.setValue(data[1][i], "Bla bla bla", data[0][i] + "");
            }

            JFreeChart chart = ChartFactory.createLineChart3D("Yearly Blood Request Count For The Month of " + getMontName(month + ""), "Year", "Request Count", dataset, PlotOrientation.VERTICAL, false, true, false);
            chart.setBackgroundPaint(Color.PINK);
            chart.getTitle().setPaint(Color.RED);
            CategoryPlot p = chart.getCategoryPlot();
            p.setRangeGridlinePaint(Color.BLUE);

            ChartPanel panel = new ChartPanel(chart);
            panel.setPreferredSize(new java.awt.Dimension(200, 350));
            chartAreaPanel.setLayout(new GridLayout());
            chartAreaPanel.removeAll();
            chartAreaPanel.revalidate();
            chartAreaPanel.add(panel);
            chartAreaPanel.repaint();

            this.repaint();
            try {
                predictText.setText(Predictions.getPredictedRequestsOf(year, month) + "");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PredictRequests.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(PredictRequests.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        monthChooser = new com.toedter.calendar.JMonthChooser();
        yearChooser = new com.toedter.calendar.JYearChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        predictText = new javax.swing.JTextField();
        predictButton = new javax.swing.JButton();
        chartAreaPanel = new javax.swing.JPanel();

        monthChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                monthChooserPropertyChange(evt);
            }
        });

        yearChooser.setMinimum(Calendar.getInstance().MONTH+1);
        yearChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                yearChooserPropertyChange(evt);
            }
        });

        jLabel1.setText("Year");

        jLabel2.setText("Month");

        jLabel3.setText("Expected request count :");

        predictButton.setText("Predict");
        predictButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(yearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(monthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(predictButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(predictText, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(350, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(predictButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(monthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(yearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(predictText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout chartAreaPanelLayout = new javax.swing.GroupLayout(chartAreaPanel);
        chartAreaPanel.setLayout(chartAreaPanelLayout);
        chartAreaPanelLayout.setHorizontalGroup(
            chartAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        chartAreaPanelLayout.setVerticalGroup(
            chartAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chartAreaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(170, 170, 170))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(chartAreaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void yearChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_yearChooserPropertyChange

    }//GEN-LAST:event_yearChooserPropertyChange

    private void monthChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_monthChooserPropertyChange
//       
    }//GEN-LAST:event_monthChooserPropertyChange

    private void predictButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictButtonActionPerformed
        int year = yearChooser.getYear();
        int month = monthChooser.getMonth() + 1;

        int currentYear = Calendar.getInstance().get(Calendar.YEAR);
        int currentMonth = Calendar.getInstance().get(Calendar.MONTH) + 1;

        System.out.println(currentMonth);
        System.out.println(currentYear);
        int data[][] = null;

        try {
            data = sdcontroller.getYearlyRequestCountsOf(month);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PredictRequests.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PredictRequests.class.getName()).log(Level.SEVERE, null, ex);
        }

        //if (data != null) {
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for (int i = 0; i < data[0].length; i++) {
                dataset.setValue(data[1][i], "Year", data[0][i] + "");
            }

            JFreeChart chart = ChartFactory.createLineChart3D("Yearly Blood Request Count For The Month of " + getMontName(month + ""), "Year", "Request Count", dataset, PlotOrientation.VERTICAL, false, true, false);
            chart.setBackgroundPaint(Color.PINK);
            chart.getTitle().setPaint(Color.RED);
            CategoryPlot p = chart.getCategoryPlot();
            p.setRangeGridlinePaint(Color.BLUE);

            ChartPanel panel = new ChartPanel(chart);
            panel.setPreferredSize(new java.awt.Dimension(200, 350));
            chartAreaPanel.setLayout(new GridLayout());
            chartAreaPanel.removeAll();
            chartAreaPanel.revalidate();
            chartAreaPanel.add(panel);
            chartAreaPanel.repaint();

            this.repaint();

            if (year >= currentYear && month >= currentMonth) {

                try {
                    predictText.setText(Predictions.getPredictedRequestsOf(year, month) + "");
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(PredictRequests.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(PredictRequests.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please choose a month in the future. Predictions available only for future months.", "Error", JOptionPane.ERROR_MESSAGE);
                predictText.setText("Invalid input!");
            }
        //}

    }//GEN-LAST:event_predictButtonActionPerformed

    private String getMontName(String monthNo) {
        SimpleDateFormat monthParse = new SimpleDateFormat("MM");
        SimpleDateFormat monthDisplay = new SimpleDateFormat("MMMM");
        String ret = null;
        try {
            ret = monthDisplay.format(monthParse.parse(monthNo));
        } catch (ParseException ex) {
            Logger.getLogger(PredictRequests.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ret;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartAreaPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private com.toedter.calendar.JMonthChooser monthChooser;
    private javax.swing.JButton predictButton;
    private javax.swing.JTextField predictText;
    private com.toedter.calendar.JYearChooser yearChooser;
    // End of variables declaration//GEN-END:variables
}
